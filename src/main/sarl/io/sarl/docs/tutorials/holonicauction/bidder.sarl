package io.sarl.docs.tutorials.holonicauction

import io.sarl.core.DefaultContextInteractions
import io.sarl.core.Initialize
import io.sarl.core.Lifecycle
import io.sarl.util.Scopes
import io.sarl.core.Logging
import java.util.Random

agent Bidder {
	
	uses DefaultContextInteractions, Lifecycle, Logging

	val random = new Random()
	var maxPrice : float
	var myLastBid : float

	on Initialize {
		info("Bidder created")
		maxPrice = random.nextFloat() * 1000f + 100f
		info(maxPrice)
	}

	on Price {
		if(occurrence.price == myLastBid) {
			info("I do not bet, I am the winner with :" + myLastBid)
		} else {
			if(occurrence.price < maxPrice) {
				info("Receiving the price: " + occurrence.price)
				var priceIncrease = random.nextFloat() * 50f
				if(priceIncrease > 0) {
					var newPrice = occurrence.price + priceIncrease

					info("My new price is: " + newPrice)
					if(newPrice <= maxPrice) {
						info("Send my bid: " + newPrice)
						var superScope = Scopes.addresses(defaultSpace.getAddress(defaultContext.ID))
						emit(new Bid(newPrice), superScope)
						myLastBid = newPrice
					} else {
						info(" I give up, this is beyond my resources : " + myLastBid)
					}
				}
			}
			else {
				info("I dropped to " + myLastBid)
			}
		}
	}

	on StopAuction {
		info("Auctioneer wants to kill me")
		killMe
	}

}

